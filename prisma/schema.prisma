generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum IdentityProvider {
  YAY
  GOOGLE
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  sessions         Session[]
  identityProvider IdentityProvider? @default(YAY)
  todo             Todo[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Todo {
  id        String   @id @default(cuid())
  name      String
  goals     Goals[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Goals {
  id          Int      @id @default(autoincrement())
  todo        Todo     @relation(fields: [todoId], references: [id])
  todoId      String
  name        String
  description String?
  done        Boolean  @default(false)
  priority    Priority @default(LOW)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
